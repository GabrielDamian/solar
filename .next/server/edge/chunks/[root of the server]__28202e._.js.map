{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { jwtVerify } from \"jose\";\n\nexport async function middleware(req) {\n  const token = req.cookies.get(\"token\"); // Get the token from cookies\n\n  if (!token) {\n    return NextResponse.redirect(new URL(\"/login\", req.url));\n  }\n\n  try {\n    // Verify the JWT token using 'jose'\n    const secret = new TextEncoder().encode(process.env.JWT_SECRET);\n    await jwtVerify(token.value, secret); // Throws an error if verification fails\n\n    return NextResponse.next(); // Token is valid, allow the request\n  } catch (error) {\n    console.log(\"error\", error);\n    return NextResponse.redirect(new URL(\"/login\", req.url)); // Invalid token, redirect to login\n  }\n}\n\n// Apply middleware to specific routes\nexport const config = {\n  matcher: [\"/dashboard\"], // Protect only the /dashboard route\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGO,eAAe,WAAW,GAAG;IAClC,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,6BAA6B;IAErE,IAAI,CAAC,OAAO;QACV,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;IACxD;IAEA,IAAI;QACF,oCAAoC;QACpC,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU;QAC9D,MAAM,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE,MAAM,KAAK,EAAE,SAAS,wCAAwC;QAE9E,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,IAAI,oCAAoC;IAClE,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,SAAS;QACrB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG,IAAI,mCAAmC;IAC/F;AACF;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAa;AACzB"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}